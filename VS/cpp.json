{
    // Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
    // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
    // same ids are connected.
    // Example:
    // "Print to console": {
    // 	"prefix": "log",
    // 	"body": [
    // 		"console.log('$1');",
    // 		"$2"
    // 	],
    // 	"description": "Log output to console"
    // }
    /**
	---------main cpp template-----
	*/
    "Default cpp formate": {
        "prefix": [
            "comp",
            "cpp"
        ],
        "body": [
            "#include <bits/stdc++.h>",
            "using namespace std;",
            "#define pi (3.141592653589)",
            "#define mod 1000000007",
            "#define pb push_back",
            "#define mp make_pair",
            "#define ff first",
            "#define ss second",
            "#define all(c) c.begin(), c.end()",
            "#define fast ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);",
            "#define vi vector<int>",
            "#define vll vector<long long int>",
            "#define vpii vector<pair<int, int>>",
            "#define maap(x, y) make_pair(x, y)",
            "#define rall(x) x.rbegin(), x.rend()",
            "#define ll long long",
            "#define ld long double",
            "\n",
            "void solve()",
            "{",
            "\n",
            "$0",
            "}",
            "void test()",
            "{",
            "int t = 1;",
            "cin >> t;",
            "cin.ignore();",
            " while (t--)",
            "{",
            "solve();",
            "}",
            "}",
            "\n",
            "int32_t main(){",
            "fast;",
            "\n",
            "test();",
            "//solve();",
            "return 0;",
            "}",
            "",
        ],
        "description": "This is a c++ sniffpet",
    },
    /**
		for loop i=0----n
	*/
    "for loop": {
        "prefix": "fn",
        "body": [
            "for(int i = 0 ; i<n ; i++)",
            "{",
            "${0:/* code */}",
            "}"
        ],
        "description": "For Loop",
    },
    /**
		for loop string
	*/
    "for loop string": {
        "prefix": "fs",
        "body": [
            "for(int i = 0 ; i<s.size(); i++)",
            "{",
			"	${0:/* code */}",
            "}"
        ],
        "description": "For Loop",
    },
    /**
		while loop test
	*/
    "while loop": {
        "prefix": "test",
        "body": [
            "while(t--)",
            "{",
			"	${0:/* code */}",
            "}"
        ],
        "description": "while Loop",
    },
    /**
		new line
	*/
    "end line": {
        "prefix": "nl",
        "body": [
            "cout<<endl;"
        ],
        "description": "end line",
    },
    /**
		input
	*/
    "input n": {
        "prefix": "inn",
        "body": [
            "ll n, m, a, b, c = 0;",
            "string s;",
            "cin >> n;",
            "vi v(n);",
        ],
        "description": "input",
    },
    /**
		array input
	*/
    "array input ": {
        "prefix": "arr",
        "body": [
            "ll n, m, a, b, c = 0;",
            "string s;",
            "cin >> n;",
            "vi v(n);",
            "for(int i = 0 ; i<n; i++)",
            "{",
			"	$cin >> v[i];",
            "}",
        ],
        "description": "array input",
    },
}